<shader>
	
	<inputs>
		<input name="emissiveMap" type="texture" address="wrap">materials/skybox/stars_difference.dds</input> 
	</inputs>
	
	<code>
	<![CDATA[
    
        //CBS
        //Parallax scrolling fractal galaxy.
        //Inspired by JoshP's Simplicity shader: https://www.shadertoy.com/view/lslGWr
        
        float3 fract3( float3 x )
        {
            return x - floor(x);
        }
        
        float4 fract4( float4 x )
        {
            return x - floor(x);
        }
        
        float snoise(float3 uv, float res)	// by trisomie21
        {
            float3 s = float3(1e0, 1e2, 1e4);
            
            uv *= res;
            
            float3 uv0 = floor(fmod(uv, res))*s;
            float3 uv1 = floor(fmod(uv+float3(1.0, 1.0, 1.0), res))*s;
            
            float3 f = fract3(uv); f = f*f*(3.0-2.0*f);
            
            float4 v = float4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,
                          uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);
            
            float4 r = fract4(sin(v*1e-3)*1e5);
            float r0 = lerp(lerp(r.x, r.y, f.x), lerp(r.z, r.w, f.x), f.y);
            
            r = fract4(sin((v + uv1.z - uv0.z)*1e-3)*1e5);
            float r1 = lerp(lerp(r.x, r.y, f.x), lerp(r.z, r.w, f.x), f.y);
            
            return lerp(r0, r1, f.z)*2.0-1.0;
        }

		void MaterialShader(in Material_Input input, inout Material material)
		{

            float2 screenCenter = float2(0.5, 0.5);

            float freqs[4];

            freqs[0] = tex2D( emissiveMap, float2( 0.01, 0.25 ) ).x;
            freqs[1] = tex2D( emissiveMap, float2( 0.07, 0.25 ) ).x;
            freqs[2] = tex2D( emissiveMap, float2( 0.15, 0.25 ) ).x;
            freqs[3] = tex2D( emissiveMap, float2( 0.30, 0.25 ) ).x;

            float brightness	= freqs[1] * 0.25 + freqs[2] * 0.25;
            float radius		= 0.24 + brightness * 0.2;
            float invRadius 	= 1.0/radius;
            
            float3 orange	    = float3( 0.8, 0.65, 0.3 );
            float3 orangeRed    = float3( 0.8, 0.35, 0.1 );
            float time1		    = time * 0.05;
            float aspect	    = screenCenter.x/screenCenter.y;
            float2 uv			= input.texCoord.xy / screenCenter.xy;
            float2 p 			= -0.5 + uv;
            p.x *= aspect;

            float fade		= pow( length( 2.0 * p ), 0.7 );
            float fVal1		= 1.0 - fade;
            float fVal2		= 1.0 - fade;
            
            float angle		= atan2( p.y, p.x ) * 1.0;
            float dist		= length(p);
            float3 coord    = float3( angle, dist, time1 * 0.1 );
            
            float newTime1	= abs( snoise( coord + float3( 0.0, -time1 * ( 0.35 + brightness * 0.001 ), time1 * 0.015 ), 15.0 ) );
            float newTime2	= abs( snoise( coord + float3( 0.0, -time1 * ( 0.15 + brightness * 0.001 ), time1 * 0.015 ), 45.0 ) );	
            
            //for( int i=1; i<=7; i++ ){
            //    float power = pow( 2.0, float(i+1) );
            //    fVal1 += ( 0.5 / power ) * snoise( coord + float3( 0.0, -time1, time1 * 0.2 ), ( power * ( 10.0 ) * ( newTime1 + 1.0 ) ) );
            //    fVal2 += ( 0.5 / power ) * snoise( coord + float3( 0.0, -time1, time1 * 0.2 ), ( power * ( 25.0 ) * ( newTime2 + 1.0 ) ) );
            //}
    
            float corona = pow( fVal1 * max( 1.1 - fade, 0.0 ), 2.0 ) * 50.0;
            corona += pow( fVal2 * max( 1.1 - fade, 0.0 ), 2.0 ) * 50.0;
            corona *= 1.2 - newTime1;
            float3 sphereNormal = float3( 0.0, 0.0, 1.0 );
            float3 dir = float3( 0.0, 0.0, 0.0 );
            float3 center = float3( 0.5, 0.5, 1.0 );
            float3 starSphere = float3( 0.0, 0.0, 0.0 );
            
            float2 sp = -1.0 + 2.0 * uv;
            sp.x *= aspect;
            sp *= ( 2.0 - brightness );
            float r = dot(sp,sp);
            float f = (1.0-sqrt(abs(1.0-r)))/(r) + brightness * 0.5;
            if( dist < radius ){
                corona			*= dist * invRadius;
                float2 newUv;
                newUv.x = sp.x*f;
                newUv.y = sp.y*f;
                newUv += float2( time1, 1.0 );
                
                float3 texSample    = tex2D( emissiveMap, newUv ).rgb;
                float uOff          = ( texSample.g * brightness * 4.5 + time1 );
                float2 starUV		= newUv + float2( uOff, 0.0 );
                starSphere		    = tex2D( emissiveMap, starUV ).rgb;
            }
            
            float starGlow	= min( max( 1.0 - dist*2.0 * ( 1.0 - brightness ), 0.0 ), 1.0 );

            material.emissive = clamp(float3( f * ( 0.35 + brightness * 0.3 ) * orange) + starSphere + corona * orange * 0.1 + starGlow * orangeRed, 0, 1);
    
            
		}
	]]>
	</code>

</shader>