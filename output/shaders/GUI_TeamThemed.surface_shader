<shader>
	
	<inputs>
		<input name="baseTexture"  type="texture" address="wrap" />
		
		<input name="teamBaseColorR" type="float">0.0</input>
		<input name="teamBaseColorG" type="float">0.0</input>
		<input name="teamBaseColorB" type="float">0.0</input>
		<input name="teamBaseColorA" type="float">1.0</input>
		
		<input name="teamAccentColorR" type="float">0.0</input>
		<input name="teamAccentColorG" type="float">0.0</input>
		<input name="teamAccentColorB" type="float">0.0</input>
		<input name="teamAccentColorA" type="float">1.0</input>
		
	</inputs>
	
	<code>
    <![CDATA[
	
		
		/*
		** Hue, saturation, luminance
		*/

		float3 RGBToHSL(float3 color)
		{
			float3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)
			
			float fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB
			float fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB
			float delta = fmax - fmin;             //Delta RGB value

			hsl.z = (fmax + fmin) / 2.0; // Luminance

			if (delta == 0.0)		//This is a gray, no chroma...
			{
				hsl.x = 0.0;	// Hue
				hsl.y = 0.0;	// Saturation
			}
			else                                    //Chromatic data...
			{
				if (hsl.z < 0.5)
					hsl.y = delta / (fmax + fmin); // Saturation
				else
					hsl.y = delta / (2.0 - fmax - fmin); // Saturation
				
				float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;
				float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;
				float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;

				if (color.r == fmax )
					hsl.x = deltaB - deltaG; // Hue
				else if (color.g == fmax)
					hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue
				else if (color.b == fmax)
					hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue

				if (hsl.x < 0.0)
					hsl.x += 1.0; // Hue
				else if (hsl.x > 1.0)
					hsl.x -= 1.0; // Hue
			}

			return hsl;
		}

		float HueToRGB(float f1, float f2, float hue)
		{
			if (hue < 0.0)
				hue += 1.0;
			else if (hue > 1.0)
				hue -= 1.0;
			float res;
			if ((6.0 * hue) < 1.0)
				res = f1 + (f2 - f1) * 6.0 * hue;
			else if ((2.0 * hue) < 1.0)
				res = f2;
			else if ((3.0 * hue) < 2.0)
				res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
			else
				res = f1;
			return res;
		}

		float3 HSLToRGB(float3 hsl)
		{
			float3 rgb;
			
			if (hsl.y == 0.0)
				rgb = float3(hsl.z, hsl.z, hsl.z); // Luminance
			else
			{
				float f2;
				
				if (hsl.z < 0.5)
					f2 = hsl.z * (1.0 + hsl.y);
				else
					f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);
					
				float f1 = 2.0 * hsl.z - f2;
				
				rgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));
				rgb.g = HueToRGB(f1, f2, hsl.x);
				rgb.b= HueToRGB(f1, f2, hsl.x - (1.0/3.0));
			}
			
			return rgb;
		}

		/*
		** Contrast, saturation, brightness
		** Code of this function is from TGM's shader pack
		** http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=21057
		*/

		// For all settings: 1.0 = 100% 0.5=50% 1.5 = 150%
		float3 ContrastSaturationBrightness(float3 color, float brt, float sat, float con)
		{
			// Increase or decrease theese values to adjust r, g and b color channels seperately
			const float AvgLumR = 0.5;
			const float AvgLumG = 0.5;
			const float AvgLumB = 0.5;
			
			const float3 LumCoeff = float3(0.2125, 0.7154, 0.0721);
			
			float3 AvgLumin = float3(AvgLumR, AvgLumG, AvgLumB);
			float3 brtColor = color * brt;
			float intensityf = dot(brtColor, LumCoeff);
			float3 intensity = float3(intensityf, intensityf, intensityf);
			float3 satColor = lerp(intensity, brtColor, sat);
			float3 conColor = lerp(AvgLumin, satColor, con);
			return conColor;
		}
		
		// Hue Blend mode creates the result color by combining the luminance and saturation of the base color with the hue of the blend color.
		float3 BlendHue(float3 base, float3 blend)
		{
			float3 baseHSL = RGBToHSL(base);
			return HSLToRGB(float3(RGBToHSL(blend).r, baseHSL.g, baseHSL.b));
		}
		
		// Color Mode keeps the brightness of the base color and applies both the hue and saturation of the blend color.
		float3 BlendColor(float3 base, float3 blend)
		{
			float3 blendHSL = RGBToHSL(blend);
			return HSLToRGB(float3(blendHSL.r, blendHSL.g, RGBToHSL(base).b));
		}
		
		// Saturation Blend mode creates the result color by combining the luminance and hue of the base color with the saturation of the blend color.
		float3 BlendSaturation(float3 base, float3 blend)
		{
			float3 baseHSL = RGBToHSL(base);
			return HSLToRGB(float3(baseHSL.r, RGBToHSL(blend).g, baseHSL.b));
		}
		
		float3 BlendColorOverlay( float3 texColor, float3 blendColor ) 
		//Spcefic to handling emissive colorization in similar to Photoshop's Overlay layer blend-mode
		{
			float3 resultColor;
			
			if (texColor.r > 0.5) {
				resultColor.r = 1 - (1 - 2 * (texColor.r - 0.5)) * (1 - blendColor.r);
			} else {
				resultColor.r = (2 * texColor.r) * blendColor.r;
			}

			if (texColor.g > 0.5) {
				resultColor.g = 1 - (1 - 2 * (texColor.g - 0.5)) * (1 - blendColor.g);
			} else {
				resultColor.g = (2 * texColor.g) * blendColor.g;
			}
			
			if (texColor.b > 0.5) {
				resultColor.b = 1 - (1 - 2 * (texColor.b - 0.5)) * (1 - blendColor.b);
			} else {
				resultColor.b = (2 * texColor.b) * blendColor.b;
			}
			
			return resultColor;
		}
		
		
		void MaterialShader(bool textured, float2 texCoord, float4 color, inout Material material) {
			
			float4 uiBaseColor = float4( teamBaseColorR, teamBaseColorG, teamBaseColorB, teamBaseColorA );
			float4 uiAccentColor = float4( teamAccentColorR, teamAccentColorG, teamAccentColorB, teamAccentColorA );
			
			if (textured) {
				
				float4 uiTex = tex2D( baseTexture, texCoord );
				float3 greyUiTex = dot( uiTex, float3(0.299, 0.587, 0.114) );
				
				float3 blendedTex = BlendColorOverlay( greyUiTex.rgb, uiBaseColor.rgb );
				
				//TODO Work in luminance value of baseBlended to applied additional colors (highlighting, etc)
				//Probably need to refer to "normal" albedo processing
				float4 finalTex = float4( blendedTex.r, blendedTex.g, blendedTex.b, uiTex.a );
				
				material.resultColor = finalTex * color;
				//material.resultColor = tex2D(baseTexture, texCoord) * color;
				
			} else {
			
				material.resultColor = color;
			}

		}
		
	]]>	
	</code>

</shader>