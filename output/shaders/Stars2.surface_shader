<shader>
	
	<inputs>
		<input name="emissiveMap" type="texture" address="wrap">materials/skybox/stars_difference.dds</input> 
	</inputs>
	
	<code>
	<![CDATA[
    
        //CBS
        //Parallax scrolling fractal galaxy.
        //Inspired by JoshP's Simplicity shader: https://www.shadertoy.com/view/lslGWr

        float exp( float x )
        {
            return pow(x, 2.0);
        }
        
        float fract( float x )
        {
            return x - floor(x);
        }
        
        float3 fract3( float3 x )
        {
            return x - floor(x);
        }
        
        float field(float3 p,float s) {
            float strength = 7.0 + .03 * sin(1.0e-6 + fract(sin(time) * 4373.11));
            float accum = s/4.0;
            float prev = 0.0;
            float tw = 0.0;
            for (int i = 0; i < 26; ++i) {
                float mag = dot(p, p);
                p = abs(p) / mag + float3(-.5, -.4, -1.5);
                float w = exp(-float(i) / 7.0);
                accum += w * exp(-strength * pow(abs(mag - prev), 2.2));
                tw += w;
                prev = mag;
            }
            return max(0.0, 5.0 * accum / tw - 0.7);
        }

        // Less iterations for second layer
        float field2(float3 p, float s) {
            float strength = 7.0 + .03 * sin(1.0e-6 + fract(sin(time) * 4373.11));
            float accum = s/4.0;
            float prev = 0.0;
            float tw = 0.0;
            for (int i = 0; i < 18; ++i) {
                float mag = dot(p, p);
                p = abs(p) / mag + float3(-.5, -.4, -1.5);
                float w = exp(-float(i) / 7.0);
                accum += w * exp(-strength * pow(abs(mag - prev), 2.2));
                tw += w;
                prev = mag;
            }
            return max(0.0, 5.0 * accum / tw - .7);
        }

        float3 nrand3( float2 co )
        {
            float3 a = fract3( cos( co.x*8.3e-3 + co.y )*float3(1.3e5, 4.7e5, 2.9e5) );
            float3 b = fract3( sin( co.x*0.3e-3 + co.y )*float3(8.1e5, 1.0e5, 0.1e5) );
            float3 c = lerp(a, b, 0.5);
            return c;
        }
        
		void MaterialShader(in Material_Input input, inout Material material)
		{

            float2 screenCenter = float2(0.5, 0.5);

            float2 uv = 2.0 * input.texCoord.xy / screenCenter.xy - 1.0;
            float2 uvs = uv * screenCenter.xy / max(screenCenter.x, screenCenter.y);
            float3 p = float3(uvs / 4.0, 0) + float3(1.0, -1.3, 0.0);
            p += .2 * float3(sin(time / 16.0), sin(time / 12.0),  sin(time / 128.0));
            
            float freqs[4];

            freqs[0] = tex2D( emissiveMap, float2( 0.01, 0.25 ) ).x;
            freqs[1] = tex2D( emissiveMap, float2( 0.07, 0.25 ) ).x;
            freqs[2] = tex2D( emissiveMap, float2( 0.15, 0.25 ) ).x;
            freqs[3] = tex2D( emissiveMap, float2( 0.30, 0.25 ) ).x;

            float t = field(p,freqs[2]);
            float v = (1.0 - exp((abs(uv.x) - 1.0) * 6.0)) * (1.0 - exp((abs(uv.y) - 1.0) * 6.0));
            
            //Second Layer
            float3 p2 = float3(uvs / (4.0+sin(time*0.11)*0.2+0.2+sin(time*0.15)*0.3+0.4), 1.5) + float3(2.0, -1.3, -1.0);
            p2 += 0.25 * float3(sin(time / 16.0), sin(time / 12.0),  sin(time / 128.0));
            float t2 = field2(p2,freqs[3]);
            float4 c2 = lerp(.4, 1.0, v) * float4(1.3 * t2 * t2 * t2 ,1.8  * t2 * t2 , t2* freqs[0], t2);
            
            //Let's add some stars
            //Thanks to http://glsl.heroku.com/e#6904.0
            float2 seed = p.xy * 2.0;	
            seed = floor(seed * screenCenter.x);
            float3 rnd = nrand3( seed );
            float4 starcolor = float4(pow(rnd.y,40.0), pow(rnd.y,40.0), pow(rnd.y,40.0), pow(rnd.y,40.0));
            
            //Second Layer
            float2 seed2 = p2.xy * 2.0;
            seed2 = floor(seed2 * screenCenter.x);
            float3 rnd2 = nrand3( seed2 );
            starcolor += float4(pow(rnd.y,40.0), pow(rnd.y,40.0), pow(rnd.y,40.0), pow(rnd.y,40.0));

            material.albedo = lerp(freqs[3]-.3, 1.0, v)* float4(1.5*freqs[2] * t * t* t , 1.2*freqs[1] * t * t, freqs[3]*t, 1.0)+c2+starcolor;
		}
	]]>
	</code>

</shader>